# loss = projection onto the discarded eigenvectors
pca_multiview:
  # weight in front of PCA loss
  log_weight: 7.0

  # predictions whould lie within the low-d subspace spanned by these components
  components_to_keep: 3

  # percentile of reprojection errors on train data below which pca loss is zeroed out
  empirical_epsilon_percentile: 1.00

  # doing eff_epsilon = percentile(error, empirical_epsilon_percentile) * empirical_epsilon_multiplier
  empirical_epsilon_multiplier: 1.0

  # absolute error (in pixels) below which pca loss is zeroed out; if not null, this
  # parameter takes precedence over `empirical_epsilon_percentile`
  epsilon: null

  error_metric: "reprojection_error" # "reprojection_error" | "proj_on_discarded_evecs"

# loss = projection onto the discarded eigenvectors
pca_singleview:
  # weight in front of PCA loss
  log_weight: 7.0

  # predictions whould lie within the low-d subspace spanned by components that describe this fraction of variance
  components_to_keep: 0.99

  # percentile of reprojection errors on train data below which pca loss is zeroed out
  empirical_epsilon_percentile: 1.00

  # doing eff_epsilon = percentile(error, empirical_epsilon_percentile) * empirical_epsilon_multiplier
  empirical_epsilon_multiplier: 1.0

  # absolute error (in pixels) below which pca loss is zeroed out; if not null, this
  # parameter takes precedence over `empirical_epsilon_percentile`
  epsilon: null

  error_metric: "reprojection_error" # "reprojection_error" | "proj_on_discarded_evecs"

# loss = norm of distance between successive timepoints
temporal:
  # weight in front of temporal loss
  log_weight: 7.5

  # for epsilon insensitive rectification (in pixels; diffs below this are not penalized)
  # either a float or a list of floats, one for each keypoint according to the order in the csv columns
  epsilon:
    [
      20.0,
      17.0,
      16.0,
      19.0,
      8.0,
      12.0,
      1.0,
      97.0,
      17.0,
      15.0,
      15.0,
      16.0,
      7.0,
      8.0,
      2.0,
      30.0,
      11.0,
    ]
# loss = mse loss between generated heatmap and ideal gaussian heatmap with same center as generated heatmap
unimodal_mse:
  # weight in front of unimodal loss
  log_weight: 0.0

# loss = wasserstein earth-mover loss between generated heatmap and ideal gaussian heatmap with same center as generated heatmap
unimodal_wasserstein:
  # weight in front of unimodal loss
  log_weight: 0.0

  # todo
  reach: none
